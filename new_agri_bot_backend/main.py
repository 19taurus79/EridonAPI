import csv
import json
import io
import os
import tempfile
from pathlib import Path
from typing import Optional, List, Dict
import uvicorn
import asyncio
from concurrent.futures import ThreadPoolExecutor

from piccolo.columns.defaults import TimestampNow

from .tables import Remains, Events
from aiogram.types import FSInputFile, BufferedInputFile
from fastapi import (
    FastAPI,
    UploadFile,
    File,
    HTTPException,
    status,
    BackgroundTasks,
    Depends,
    Query,
    Request,
    Header,
)
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime, timezone, timedelta
from piccolo_admin.endpoints import create_admin

from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from pydantic import BaseModel

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from .telegram_auth import (
    router as telegram_auth_router,
    InitDataModel,
    check_telegram_auth,
)
from .data_retrieval import router as data_retrieval_router
from .data_loader import save_processed_data_to_db
from .utils import send_message_to_managers

# –ò–º–ø–æ—Ä—Ç TELEGRAM_BOT_TOKEN –∏–∑ config.py –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
from .config import TELEGRAM_BOT_TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ utils.py, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
from aiogram import Bot
from google.oauth2 import service_account
from googleapiclient.discovery import build
from pydantic import BaseModel
from datetime import date

bot = Bot(
    TELEGRAM_BOT_TOKEN
)  # –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ main, —ç—Ç—É —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å


class ChangeDateRequest(BaseModel):
    new_date: date


class DeliveryItem(BaseModel):
    product: str
    quantity: int


class DeliveryOrder(BaseModel):
    order: str
    items: List[DeliveryItem]


class DeliveryRequest(BaseModel):
    client: str
    manager: str
    address: str
    contact: str
    phone: str
    date: str  # ISO-—Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏
    comment: str
    orders: List[DeliveryOrder]



BASE_DIR = os.path.dirname(os.path.abspath(__file__))
SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, "credentials.json")
SCOPES = ["https://www.googleapis.com/auth/calendar"]
CALENDAR_ID = "dca9aa4129540be8ec133f20092e7f0a500897595fc1736cd295a739d9dc9466@group.calendar.google.com"  # –∏–ª–∏ —É–∫–∞–∂–∏ —è–≤–Ω—ã–π ID –∫–∞–ª–µ–Ω–¥–∞—Ä—è

admin_router = create_admin([Remains], allowed_hosts=["localhost"])


async def create_calendar_event(data: DeliveryRequest) -> Optional[str]:
    try:
        credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES
        )
        service = build("calendar", "v3", credentials=credentials)

        delivery_date = datetime.strptime(data.date, "%Y-%m-%d")
        start = delivery_date.replace(hour=9, minute=0)
        end = start + timedelta(hours=1)

        # üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        lines = [
            f"–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: {data.client}",
            f"–ú–µ–Ω–µ–¥–∂–µ—Ä: {data.manager}",
            f"–ê–¥—Ä–µ—Å–∞: {data.address}",
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {data.contact}",
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.phone}",
            f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data.date}",
            f"–ö–æ–º–µ–Ω—Ç–∞—Ä : {data.comment}",
            "",
        ]

        # üì¶ –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –∏ —Ç–æ–≤–∞—Ä—ã
        for order in data.orders:
            lines.append(f"üì¶ –î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {order.order}")
            for item in order.items:
                lines.append(f" ‚Ä¢ {item.product} ‚Äî {item.quantity}")
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏

        description = "\n".join(lines)

        event = {
            "summary": f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {data.client}",
            "location": data.address,
            "description": description,
            "start": {
                "dateTime": start.isoformat(),
                "timeZone": "Europe/Kyiv",
            },
            "end": {
                "dateTime": end.isoformat(),
                "timeZone": "Europe/Kyiv",
            },
            "colorId": "11",
        }

        created_event = (
            service.events().insert(calendarId=CALENDAR_ID, body=event).execute()
        )

        return created_event

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", e)
        return None



def get_calendar_events(
    start_date: Optional[str] = None, end_date: Optional[str] = None
) -> Optional[List[Dict]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç.

    Args:
        start_date (str, optional): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.
        end_date (str, optional): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.

    Returns:
        Optional[List[Dict]]: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES
        )
        service = build("calendar", "v3", credentials=credentials)

        # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        now = datetime.utcnow()
        time_min = (datetime.utcnow() - timedelta(days=3)).replace(
            hour=0, minute=0, second=0, microsecond=0
        ).isoformat() + "Z"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        time_max = (now + timedelta(days=3)).replace(
            hour=23, minute=59, second=0, microsecond=0
        ).isoformat() + "Z"  # –î–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞

        if start_date:
            start_dt = datetime.strptime(start_date, "%Y-%m-%d")
            time_min = (
                start_dt.replace(hour=0, minute=0, second=0, microsecond=0).isoformat()
                + "Z"
            )

        if end_date:
            end_dt = datetime.strptime(end_date, "%Y-%m-%d")
            time_max = (
                end_dt.replace(hour=23, minute=59, second=0, microsecond=0).isoformat()
                + "Z"
            )

        # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        events_result = (
            service.events()
            .list(
                calendarId=CALENDAR_ID,
                timeMin=time_min,
                timeMax=time_max,
                # maxResults=20,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
                singleEvents=True,
                orderBy="startTime",
            )
            .execute()
        )

        events = events_result.get("items", [])
        return events

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", e)
        return None


def get_calendar_events_by_id(id: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç.

    Args:
        start_date (str, optional): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.
        end_date (str, optional): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'.

    Returns:
        Optional[List[Dict]]: –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    try:
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
        credentials = service_account.Credentials.from_service_account_file(
            SERVICE_ACCOUNT_FILE, scopes=SCOPES
        )
        service = build("calendar", "v3", credentials=credentials)

        # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        events_result = (
            service.events()
            .get(
                calendarId=CALENDAR_ID,
                eventId=id,
            )
            .execute()
        )
        # print(events_result)
        # events = events_result.get("items", [])
        return events_result

    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", e)
        return None


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@asynccontextmanager
async def lifespan(app: FastAPI):
    print(
        "Piccolo database engine initialized. Connections will be managed automatically."
    )
    yield
    print("Piccolo database engine shutdown. Connections are closed automatically.")


app = FastAPI(
    title="Data Loader API for Agri-Bot",
    description="API for loading and processing various Excel data into PostgreSQL.",
    version="1.0.0",
    lifespan=lifespan,
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS ---
origins = [
    "https://taurus.pp.ua",
    "https://eridon-react.vercel.app",
    "https://eridon-bot-next-js.vercel.app",
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    "http://127.0.0.1:5500",
    "http://127.0.0.1:8000",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://telegram-mini-app-six-inky.vercel.app",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ ---
app.include_router(telegram_auth_router)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ telegram_auth.py
app.include_router(data_retrieval_router)
app.mount("/admin", admin_router)


#
class Product(BaseModel):
    product: str
    quantity: int


class Order(BaseModel):
    order: str
    products: List[Product]


class ClientData(BaseModel):
    client: str
    manager: str
    orders: List[Order]
    deliveryAddress: Optional[str]
    contactPerson: Optional[str]
    deliveryDate: Optional[str]


def format_message(data: List[ClientData]) -> str:
    lines = []
    for client in data:
        lines.append(f"üßë‚Äçüíº <b>–ö–ª–∏–µ–Ω—Ç:</b> {client.client}")
        lines.append(f"üë®‚Äçüíº <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> {client.manager}")
        lines.append("üì¶ <b>–ó–∞–∫–∞–∑—ã:</b>")
        for order in client.orders:
            lines.append(f"  üÜî <b>–ó–∞–∫–∞–∑:</b> <code>{order.order}</code>")
            for product in order.products:
                lines.append(
                    f"    ‚Ä¢ <code>{product.product}</code> ‚Äî <b>{product.quantity}</b> "
                )
        if client.deliveryAddress:
            lines.append(f"üè† <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {client.deliveryAddress}")
        if client.contactPerson:
            lines.append(f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</b> {client.contactPerson}")
        if client.deliveryDate:
            lines.append(f"üìÖ <b>–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {client.deliveryDate}")

    return "\n".join(lines)


def json_to_csv_save_local_d_drive(data: List[ClientData]) -> str:
    filepath = Path("D:/orders.csv")

    with open(filepath, mode="w", encoding="utf-8", newline="") as f:
        writer = csv.writer(f)

        writer.writerow(
            [
                "–ö–ª–∏–µ–Ω—Ç",
                "–ú–µ–Ω–µ–¥–∂–µ—Ä",
                "–ó–∞–∫–∞–∑",
                "–ü—Ä–æ–¥—É–∫—Ç",
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ",
                "–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏",
            ]
        )

        for client in data:
            for order in client.orders:
                for product in order.products:
                    writer.writerow(
                        [
                            client.client,
                            client.manager,
                            order.order,
                            product.product,
                            product.quantity,
                            client.deliveryAddress or "",
                            client.contactPerson or "",
                            client.deliveryDate or "",
                        ]
                    )

    return str(filepath)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É


@app.post("/send_telegram_message/")
async def send_telegram_message(
    data: List[ClientData],
    chat_id: int = Query(..., description="Telegram chat id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"),
):
    message_text = format_message(data)
    csv_file = json_to_csv_save_local_d_drive(data)

    try:
        # await bot.send_message(chat_id=chat_id, text=message_text, parse_mode="HTML")
        await bot.send_document(
            chat_id=chat_id, document=FSInputFile(csv_file, filename=csv_file.name)
        )
        return {"status": "ok", "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –∏ CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"}
    except Exception as e:
        return {"status": "error", "details": str(e)}


# --- –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
@app.post(
    "/upload-data",
    summary="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å Excel-—Ñ–∞–π–ª—ã",
    response_description="–°—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
)
async def upload_data(
    background_tasks: BackgroundTasks,
    av_stock_file: UploadFile = File(..., description="–§–∞–π–ª —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏"),
    remains_file: UploadFile = File(..., description="–§–∞–π–ª —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏"),
    submissions_file: UploadFile = File(..., description="–§–∞–π–ª —Å –∑–∞—è–≤–∫–∞–º–∏"),
    payment_file: UploadFile = File(..., description="–§–∞–π–ª —Å –æ–ø–ª–∞—Ç–æ–π"),
    moved_file: UploadFile = File(..., description="–§–∞–π–ª —Å –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"),
):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
    –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –≤ Telegram.
    """
    print(f"[{datetime.now(timezone.utc)}] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö.")

    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–π—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        av_stock_content = await av_stock_file.read()
        remains_content = await remains_file.read()
        submissions_content = await submissions_file.read()
        payment_content = await payment_file.read()
        moved_content = await moved_file.read()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ASGI-—Å–µ—Ä–≤–µ—Ä.
        background_tasks.add_task(
            save_processed_data_to_db,  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
            av_stock_content,
            remains_content,
            submissions_content,
            payment_content,
            moved_content,
        )
        background_tasks.add_task(
            send_message_to_managers
        )  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        return JSONResponse(
            status_code=status.HTTP_202_ACCEPTED,
            content={
                "message": "–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∞—Ç—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            },
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}",
        )


@app.post("/delivery/send")
async def send_delivery(data: DeliveryRequest, X_Telegram_Init_Data: str = Header()):
    parsed_init_data = check_telegram_auth(X_Telegram_Init_Data)
    user_info_str = parsed_init_data.get("user")
    user_data = json.loads(user_info_str)
    telegram_id = user_data.get("id")
    # üìù –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram
    print(X_Telegram_Init_Data)
    message_lines = [
        f"üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä: {data.manager}",
        f"üöö –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: <code>{data.client}</code>",
        f"üìç –ê–¥—Ä–µ—Å–∞: {data.address}",
        f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {data.contact}",
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.phone}",
        f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data.date}",
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {data.comment}",
        "",
    ]

    for order in data.orders:
        message_lines.append(f"üì¶ *–î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è:* <code>{order.order}</code>")
        for item in order.items:
            message_lines.append(f" ‚Ä¢ <code>{item.product}</code> ‚Äî {item.quantity}")
        message_lines.append("")

    message = "\n".join(message_lines)

    # üßæ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel
    wb = Workbook()
    ws = wb.active
    ws.title = "–î–æ—Å—Ç–∞–≤–∫–∞"

    ws.append(["–ú–µ–Ω–µ–¥–∂–µ—Ä", data.manager])
    ws.append(["–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç", data.client])
    ws.append(["–ê–¥—Ä–µ—Å–∞", data.address])
    ws.append(["–ö–æ–Ω—Ç–∞–∫—Ç", data.contact])
    ws.append(["–¢–µ–ª–µ—Ñ–æ–Ω", data.phone])
    ws.append(["–î–∞—Ç–∞", data.date])
    ws.append(["–ö–æ–º–µ–Ω—Ç–∞—Ä", data.comment])
    ws.append([])
    ws.append(["–î–æ–ø–æ–≤–Ω–µ–Ω–Ω—è", "–¢–æ–≤–∞—Ä", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å"])

    for order in data.orders:
        for item in order.items:
            ws.append([order.order, item.product, item.quantity])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –∏–º–µ–Ω–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    safe_manager = data.manager.replace(" ", "_")
    filename = (
        f"–î–æ—Å—Ç–∞–≤–∫–∞_{safe_manager}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    )
    # üìê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    for column_cells in ws.columns:
        max_length = 0
        column = column_cells[0].column
        col_letter = get_column_letter(column)
        for cell in column_cells:
            if cell.value:
                max_length = max(max_length, len(str(cell.value)))
        ws.column_dimensions[col_letter].width = max_length + 2

    with tempfile.NamedTemporaryFile(suffix=".xlsx", delete=False) as tmp:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º Excel
        wb.save(tmp.name)
        tmp.flush()

        # –ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        excel_file = FSInputFile(tmp.name, filename=filename)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        # admins = ["548019148", "1060393824", "7953178333"]
        # admins = ["548019148", "1060393824"]
        admins_json = os.getenv("ADMINS", "[]")
        admins = json.loads(admins_json)
        for admin in admins:
            await bot.send_message(chat_id=admin, text=message, parse_mode="HTML")
            await bot.send_document(chat_id=admin, document=excel_file)
        await bot.send_message(
            chat_id=telegram_id, text="–í–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ —Ç–∞–∫—ñ –¥–∞–Ω–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ :"
        )
        await bot.send_message(chat_id=telegram_id, text=message, parse_mode="HTML")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(tmp.name)

    calendar = await create_calendar_event(data)
    calendar_link = calendar["htmlLink"]
    date = datetime.fromisoformat(calendar["start"]["dateTime"]).date()
    await Events.insert(
        Events(
            event_id=calendar["id"],
            event_creator=telegram_id,
            event_creator_name=data.manager,
            event_status=0,
            start_event=date,
            event=data.client,
        )
    ).run()

    if calendar_link:
        print("üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", calendar_link)
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")


    return {"status": "ok"}
